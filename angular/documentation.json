{
    "pipes": [],
    "interfaces": [
        {
            "name": "AddUserResponse",
            "id": "interface-AddUserResponse-3dbd550b30171a906a2ee9b2c00a3151b34ea36dfac8e4fae6a6e4cbc199fc7482cc44dd61e5806bac593024080d8b24ff0b52d18d5e5dd290820eec1fc1c24e",
            "file": "src/users/domain/graphql/mutations/add-user-mutation.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport { Mutation, gql } from \"apollo-angular\";\r\nimport { CreateUser, User } from \"../../../shared\";\r\n\r\nexport interface AddUserResponse {\r\n    addUser : User\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class AddUserMutation extends Mutation <\r\n    AddUserResponse,\r\n    {\r\n        input: CreateUser\r\n    }>{\r\n    public override document = gql`\r\n        mutation addUser($input: CreateUserInput!){\r\n            addUser(createUser: $input) {\r\n                correlationId\r\n                displayName\r\n                email\r\n            }\r\n        }`\r\n}",
            "properties": [
                {
                    "name": "addUser",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "BasicButton",
            "id": "interface-BasicButton-39942e139923756029f53c92173c5cf1d791668efbc486401e45cdefb50090c7e31823ca25e70cc4862517920c2a194734dcdd49881002bc5e44bac8e74af483",
            "file": "src/components/buttons/model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Action } from \"@ngrx/store\";\r\n\r\nexport interface ButtonDefinition {\r\n    buttonType: 'normal'|'submit'|'warning';\r\n    type: 'basic'|'submit'|'reset';\r\n    kind: 'basic'|'raised'|'fab';\r\n}\r\n\r\nexport interface BasicButton {\r\n    buttonDefinition: ButtonDefinition;\r\n    label?:string;\r\n    icon?:string;\r\n    disabled: boolean;\r\n}\r\n\r\nexport interface FormButton extends BasicButton {\r\n    action?: Action;\r\n}\r\n",
            "properties": [
                {
                    "name": "buttonDefinition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ButtonDefinition",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ButtonDefinition",
            "id": "interface-ButtonDefinition-39942e139923756029f53c92173c5cf1d791668efbc486401e45cdefb50090c7e31823ca25e70cc4862517920c2a194734dcdd49881002bc5e44bac8e74af483",
            "file": "src/components/buttons/model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Action } from \"@ngrx/store\";\r\n\r\nexport interface ButtonDefinition {\r\n    buttonType: 'normal'|'submit'|'warning';\r\n    type: 'basic'|'submit'|'reset';\r\n    kind: 'basic'|'raised'|'fab';\r\n}\r\n\r\nexport interface BasicButton {\r\n    buttonDefinition: ButtonDefinition;\r\n    label?:string;\r\n    icon?:string;\r\n    disabled: boolean;\r\n}\r\n\r\nexport interface FormButton extends BasicButton {\r\n    action?: Action;\r\n}\r\n",
            "properties": [
                {
                    "name": "buttonType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"normal\" | \"submit\" | \"warning\"",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "kind",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"basic\" | \"raised\" | \"fab\"",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"basic\" | \"submit\" | \"reset\"",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "CreateUser",
            "id": "interface-CreateUser-782d6a5b04e6d4f136d86ed74875d4aafa49354c6d172b58982340de3bdfa279c5a518737360c45c902919ea4325a0b4ba5d1e18a6d6c78567cbea1093b3742f",
            "file": "src/users/shared/models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\r\n    correlationId: string;\r\n    displayName: string;\r\n    email: string;\r\n}\r\n\r\nexport interface CreateUser {\r\n    displayName?: string;\r\n    email?: string;\r\n}\r\n\r\nexport interface UpdateUser {\r\n    correlationId: string;\r\n    displayName: string;\r\n    email: string;\r\n}",
            "properties": [
                {
                    "name": "displayName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "DynamicFormField",
            "id": "interface-DynamicFormField-45677120883b532a5118ac72fa970766e1f01b6c77cc66bf693954f28f749c45ddfe6d53287786fb5f6be53fb11ae7b8fa758d062b503f4a5613e1398eec543a",
            "file": "src/components/forms/model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Validators } from \"@angular/forms\";\r\n\r\nexport type FormType = 'input' | 'text-area'\r\n\r\nexport interface DynamicFormField<TItem> {\r\n    name: string & keyof TItem;\r\n    type: FormType;\r\n    defaultValue: unknown,\r\n    disabled: boolean,\r\n    validators: Validators\r\n}",
            "properties": [
                {
                    "name": "defaultValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormType",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "validators",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Validators",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "FormButton",
            "id": "interface-FormButton-39942e139923756029f53c92173c5cf1d791668efbc486401e45cdefb50090c7e31823ca25e70cc4862517920c2a194734dcdd49881002bc5e44bac8e74af483",
            "file": "src/components/buttons/model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Action } from \"@ngrx/store\";\r\n\r\nexport interface ButtonDefinition {\r\n    buttonType: 'normal'|'submit'|'warning';\r\n    type: 'basic'|'submit'|'reset';\r\n    kind: 'basic'|'raised'|'fab';\r\n}\r\n\r\nexport interface BasicButton {\r\n    buttonDefinition: ButtonDefinition;\r\n    label?:string;\r\n    icon?:string;\r\n    disabled: boolean;\r\n}\r\n\r\nexport interface FormButton extends BasicButton {\r\n    action?: Action;\r\n}\r\n",
            "properties": [
                {
                    "name": "action",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Action",
                    "optional": true,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "BasicButton"
            ]
        },
        {
            "name": "UpdateUser",
            "id": "interface-UpdateUser-782d6a5b04e6d4f136d86ed74875d4aafa49354c6d172b58982340de3bdfa279c5a518737360c45c902919ea4325a0b4ba5d1e18a6d6c78567cbea1093b3742f",
            "file": "src/users/shared/models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\r\n    correlationId: string;\r\n    displayName: string;\r\n    email: string;\r\n}\r\n\r\nexport interface CreateUser {\r\n    displayName?: string;\r\n    email?: string;\r\n}\r\n\r\nexport interface UpdateUser {\r\n    correlationId: string;\r\n    displayName: string;\r\n    email: string;\r\n}",
            "properties": [
                {
                    "name": "correlationId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "displayName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "User",
            "id": "interface-User-782d6a5b04e6d4f136d86ed74875d4aafa49354c6d172b58982340de3bdfa279c5a518737360c45c902919ea4325a0b4ba5d1e18a6d6c78567cbea1093b3742f",
            "file": "src/users/shared/models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\r\n    correlationId: string;\r\n    displayName: string;\r\n    email: string;\r\n}\r\n\r\nexport interface CreateUser {\r\n    displayName?: string;\r\n    email?: string;\r\n}\r\n\r\nexport interface UpdateUser {\r\n    correlationId: string;\r\n    displayName: string;\r\n    email: string;\r\n}",
            "properties": [
                {
                    "name": "correlationId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "displayName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Users",
            "id": "interface-Users-d3c0c12370bbce3439d13d60438a5f4c3c1e4a97b24b3ba893d1b024399b910e51834594841b5f8b074baf77df0cc8e4c52e30118c4c317a6854e6914aade008",
            "file": "src/users/domain/graphql/queries/users-query.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport { Query, gql } from \"apollo-angular\";\r\nimport { User } from \"../../../shared\";\r\n\r\nexport interface Users{\r\n    users: User[]\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class UsersQuery extends Query<Users> {\r\n    public override document = gql`\r\n        query {\r\n            users {\r\n                correlationId\r\n                displayName\r\n                email\r\n            }\r\n        }`\r\n}",
            "properties": [
                {
                    "name": "users",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "UsersPartialState",
            "id": "interface-UsersPartialState-be8ed6e9d36dfc9d3d9408c8354589976bb7fe4f584641ad0d60ce9f6f1db8513232b4259e4f629ce1a85a785ce2d7a7c1052ea69d3843784798fd3a021d5a66",
            "file": "src/users/domain/state/users.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Action, createReducer, on } from \"@ngrx/store\";\r\nimport { User } from \"../../shared\";\r\nimport { UserCreationActions, UsersGenericActions } from \"./users.actions\";\r\n\r\nexport const USERS_FEATURE_KEY = 'users';\r\n\r\nfunction addUserOrdered(list: User[], user: User){\r\n    let updatedList = list.concat(user);\r\n\r\n    return updatedList.sort((a, b)=> {\r\n        if (a.correlationId < b.correlationId){\r\n            return 1\r\n        }\r\n        if (a.correlationId > b.correlationId){\r\n            return -1\r\n        }\r\n        return 0\r\n    });\r\n}\r\n\r\nexport interface UsersState {\r\n    usersLoaded: boolean;\r\n    usersList: User[];\r\n    currentUser?: User;\r\n}\r\n\r\nexport interface UsersPartialState {\r\n    readonly [USERS_FEATURE_KEY]: UsersState;\r\n}\r\n\r\nexport const initialState: UsersState = {\r\n    usersLoaded: false,\r\n    usersList: []\r\n}\r\n\r\nconst reducer = createReducer(\r\n    initialState,\r\n    on(UsersGenericActions.usersListLoaded, (state, action) =>({\r\n        ...state,\r\n        usersLoaded: true,\r\n        usersList: action.usersList\r\n    })),\r\n    on(UserCreationActions.userCreationSucceeded, state =>({\r\n        ...state,\r\n        usersLoaded: false,\r\n    })),\r\n    on(UsersGenericActions.usersListUpdated, (state, action) => ({\r\n        ...state,\r\n        usersLoaded: true,\r\n        usersList: state.usersList.concat(action.user)\r\n    }))\r\n);\r\n\r\nexport function usersReducer(state: UsersState, action: Action){\r\n    return reducer(state, action)\r\n}",
            "properties": [
                {
                    "name": "USERS_FEATURE_KEY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UsersState",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "UsersState",
            "id": "interface-UsersState-be8ed6e9d36dfc9d3d9408c8354589976bb7fe4f584641ad0d60ce9f6f1db8513232b4259e4f629ce1a85a785ce2d7a7c1052ea69d3843784798fd3a021d5a66",
            "file": "src/users/domain/state/users.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Action, createReducer, on } from \"@ngrx/store\";\r\nimport { User } from \"../../shared\";\r\nimport { UserCreationActions, UsersGenericActions } from \"./users.actions\";\r\n\r\nexport const USERS_FEATURE_KEY = 'users';\r\n\r\nfunction addUserOrdered(list: User[], user: User){\r\n    let updatedList = list.concat(user);\r\n\r\n    return updatedList.sort((a, b)=> {\r\n        if (a.correlationId < b.correlationId){\r\n            return 1\r\n        }\r\n        if (a.correlationId > b.correlationId){\r\n            return -1\r\n        }\r\n        return 0\r\n    });\r\n}\r\n\r\nexport interface UsersState {\r\n    usersLoaded: boolean;\r\n    usersList: User[];\r\n    currentUser?: User;\r\n}\r\n\r\nexport interface UsersPartialState {\r\n    readonly [USERS_FEATURE_KEY]: UsersState;\r\n}\r\n\r\nexport const initialState: UsersState = {\r\n    usersLoaded: false,\r\n    usersList: []\r\n}\r\n\r\nconst reducer = createReducer(\r\n    initialState,\r\n    on(UsersGenericActions.usersListLoaded, (state, action) =>({\r\n        ...state,\r\n        usersLoaded: true,\r\n        usersList: action.usersList\r\n    })),\r\n    on(UserCreationActions.userCreationSucceeded, state =>({\r\n        ...state,\r\n        usersLoaded: false,\r\n    })),\r\n    on(UsersGenericActions.usersListUpdated, (state, action) => ({\r\n        ...state,\r\n        usersLoaded: true,\r\n        usersList: state.usersList.concat(action.user)\r\n    }))\r\n);\r\n\r\nexport function usersReducer(state: UsersState, action: Action){\r\n    return reducer(state, action)\r\n}",
            "properties": [
                {
                    "name": "currentUser",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User",
                    "optional": true,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "usersList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "usersLoaded",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "AddUserMutation",
            "id": "injectable-AddUserMutation-3dbd550b30171a906a2ee9b2c00a3151b34ea36dfac8e4fae6a6e4cbc199fc7482cc44dd61e5806bac593024080d8b24ff0b52d18d5e5dd290820eec1fc1c24e",
            "file": "src/users/domain/graphql/mutations/add-user-mutation.ts",
            "properties": [
                {
                    "name": "document",
                    "defaultValue": "gql`\r\n        mutation addUser($input: CreateUserInput!){\r\n            addUser(createUser: $input) {\r\n                correlationId\r\n                displayName\r\n                email\r\n            }\r\n        }`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        125,
                        164
                    ]
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport { Mutation, gql } from \"apollo-angular\";\r\nimport { CreateUser, User } from \"../../../shared\";\r\n\r\nexport interface AddUserResponse {\r\n    addUser : User\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class AddUserMutation extends Mutation <\r\n    AddUserResponse,\r\n    {\r\n        input: CreateUser\r\n    }>{\r\n    public override document = gql`\r\n        mutation addUser($input: CreateUserInput!){\r\n            addUser(createUser: $input) {\r\n                correlationId\r\n                displayName\r\n                email\r\n            }\r\n        }`\r\n}",
            "extends": [
                "Mutation"
            ],
            "type": "injectable"
        },
        {
            "name": "DynamicFormBuilder",
            "id": "injectable-DynamicFormBuilder-5f100aa6ba4b8e17e5b87f8581c09eb052ebaf46f7abc48c45ffb43ab0774fbf7ed366c2373654d9a594950952629c1aed9fea6ffa0f6f294cfbc59b4a1d0ac4",
            "file": "src/components/forms/form-builder/form-builder.ts",
            "properties": [
                {
                    "name": "formButtons",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormButton[]",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "formFields",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DynamicFormField<TItem>[]",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "formGroup",
                    "defaultValue": "this.formBuilder.group({})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addFormButton",
                    "args": [
                        {
                            "name": "button",
                            "type": "FormButton",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "this",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd a form button to the builder.\n",
                    "description": "<p>Add a form button to the builder.</p>\n",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 840,
                                "end": 846,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "button"
                            },
                            "type": "FormButton",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 834,
                                "end": 839,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>The form button to add to the form.</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 892,
                                "end": 899,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>The builder for chaining/</p>\n"
                        }
                    ]
                },
                {
                    "name": "addFormField",
                    "args": [
                        {
                            "name": "field",
                            "type": "DynamicFormField<TItem>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "this",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd a form field to the builder.\n",
                    "description": "<p>Add a form field to the builder.</p>\n",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 545,
                                "end": 550,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "field"
                            },
                            "type": "DynamicFormField<TItem>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 539,
                                "end": 544,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>The dynamic form field to add to the form.</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 603,
                                "end": 610,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>The builder for chaining.</p>\n"
                        }
                    ]
                },
                {
                    "name": "buildForm",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFor each form field added, creates a form control and add it\nto the form group.\n",
                    "description": "<p>For each form field added, creates a form control and add it\nto the form group.</p>\n",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 1167,
                                "end": 1174,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>The builded form group.</p>\n"
                        }
                    ]
                },
                {
                    "name": "destroyForm",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nResets the form group value and remove all form controls.\n",
                    "description": "<p>Resets the form group value and remove all form controls.</p>\n",
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport { FormBuilder } from \"@angular/forms\";\r\nimport { DynamicFormField } from '../model';\r\nimport { FormButton } from \"../../buttons\";\r\n\r\n@Injectable({providedIn: 'root'})\r\nexport class DynamicFormBuilder<TItem extends {}> {\r\n    public formGroup = this.formBuilder.group({});\r\n    public formFields: DynamicFormField<TItem>[] = []\r\n    public formButtons: FormButton[] = [];\r\n\r\n    constructor(private formBuilder: FormBuilder){}\r\n\r\n    /**\r\n     * Add a form field to the builder.\r\n     * @param field The dynamic form field to add to the form.\r\n     * @returns The builder for chaining.\r\n     */\r\n    public addFormField(field: DynamicFormField<TItem>) {\r\n        this.formFields.push(field);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Add a form button to the builder.\r\n     * @param button The form button to add to the form.\r\n     * @returns The builder for chaining/\r\n     */\r\n    public addFormButton(button: FormButton){\r\n        this.formButtons.push(button);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * For each form field added, creates a form control and add it\r\n     * to the form group.\r\n     * @returns The builded form group.\r\n     */\r\n    public buildForm() {\r\n        this.formFields.forEach(field => {\r\n            let control = this.formBuilder.control({\r\n                disabled: field.disabled,\r\n                value: field.defaultValue\r\n            },field.validators)\r\n            this.formGroup.addControl(field.name, control);\r\n        });\r\n        return this.formGroup;\r\n    }\r\n\r\n    /**\r\n     * Resets the form group value and remove all form controls.\r\n     */\r\n    public destroyForm() {\r\n        this.formFields.forEach(field =>{\r\n            this.formGroup.removeControl(field.name);\r\n        });\r\n\r\n        this.formFields = [];\r\n        this.formButtons = [];\r\n        return this.formGroup;\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "UsersEffects",
            "id": "injectable-UsersEffects-85f561e5c129fc3151d3cdc053936938f1d6e956bd35c320a7f98e0219ddb83980d9d967bc27a19663745c5bd572b599119c8fbf06b8d42dc80654280185ed51",
            "file": "src/users/domain/state/users.effects.ts",
            "properties": [
                {
                    "name": "closeUserCreationDialog$",
                    "defaultValue": "createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(FormsActions.cancelFormRequested),\r\n            filter(action => action.id === USER_CREATION_FORM_ID),\r\n            tap((action) => this.dialogRef.close())\r\n        ),\r\n        {dispatch: false})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<UserCreationFormComponent | CreateUser>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "initUsers$",
                    "defaultValue": "createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(UsersGenericActions.init),\r\n            fetch({\r\n                run: () => this.usersQuery\r\n                                .watch()\r\n                                .valueChanges.pipe(\r\n                                    map(result => UsersGenericActions.usersListLoaded({\r\n                                        usersList: result.data.users\r\n                                    }))\r\n                                ),\r\n                onError: (_, error) => console.log(error)\r\n            })\r\n        ))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "openUserCreationDialog$",
                    "defaultValue": "createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(UserCreationActions.openCreationDialog),\r\n            tap((action) => this.dialogRef = this.dialog.open(UserCreationFormComponent, action.dialogConfig))\r\n        ),\r\n        {dispatch: false})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "saveUser$",
                    "defaultValue": "createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(UserCreationActions.saveUserRequested),\r\n            pessimisticUpdate({\r\n                run: (action) =>\r\n                    this.addUserMutation.mutate({input: action.data}).pipe(\r\n                        map(({data}) => UserCreationActions.userCreationSucceeded({\r\n                            user: data?.addUser as User\r\n                        }))\r\n                    ),\r\n                onError: (action, error) => console.log(error)\r\n            })\r\n        ))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "saveUserRequested$",
                    "defaultValue": "createEffect(() => \r\n        this.actions$.pipe(\r\n            ofType(FormsActions.saveFormRequested),\r\n            filter(form => form.id === USER_CREATION_FORM_ID),\r\n            tap(() => this.dialogRef.close()),\r\n            map(action => UserCreationActions.saveUserRequested({\r\n                data: action.data as CreateUser\r\n            }))\r\n        ))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "updateUserList$",
                    "defaultValue": "createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(UserCreationActions.userCreationSucceeded),\r\n            map((action) => UsersGenericActions.usersListUpdated({\r\n                user: action.user\r\n            }))\r\n        ))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport { Actions, createEffect, ofType } from \"@ngrx/effects\";\r\nimport { UsersQuery } from \"../graphql/queries/users-query\";\r\nimport { UserCreationActions, UsersGenericActions } from \"./users.actions\";\r\nimport { filter, map, tap } from \"rxjs\";\r\nimport { fetch, pessimisticUpdate } from '@nx/angular'\r\nimport { AddUserMutation } from \"../graphql/mutations/add-user-mutation\";\r\nimport { CreateUser, User } from \"../../shared\";\r\nimport { FormsActions } from \"../../../components/forms/form/state/form.actions\";\r\nimport { USER_CREATION_FORM_ID, UserCreationFormComponent } from \"../../feature/user-creation-form/user-creation-form.component\";\r\nimport { MatDialog, MatDialogRef } from \"@angular/material/dialog\";\r\n\r\n@Injectable()\r\nexport class UsersEffects {\r\n    private dialogRef : MatDialogRef<UserCreationFormComponent, CreateUser>;\r\n    \r\n    public initUsers$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(UsersGenericActions.init),\r\n            fetch({\r\n                run: () => this.usersQuery\r\n                                .watch()\r\n                                .valueChanges.pipe(\r\n                                    map(result => UsersGenericActions.usersListLoaded({\r\n                                        usersList: result.data.users\r\n                                    }))\r\n                                ),\r\n                onError: (_, error) => console.log(error)\r\n            })\r\n        ));\r\n\r\n    public openUserCreationDialog$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(UserCreationActions.openCreationDialog),\r\n            tap((action) => this.dialogRef = this.dialog.open(UserCreationFormComponent, action.dialogConfig))\r\n        ),\r\n        {dispatch: false})\r\n    \r\n    public closeUserCreationDialog$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(FormsActions.cancelFormRequested),\r\n            filter(action => action.id === USER_CREATION_FORM_ID),\r\n            tap((action) => this.dialogRef.close())\r\n        ),\r\n        {dispatch: false})\r\n\r\n    public saveUserRequested$ = createEffect(() => \r\n        this.actions$.pipe(\r\n            ofType(FormsActions.saveFormRequested),\r\n            filter(form => form.id === USER_CREATION_FORM_ID),\r\n            tap(() => this.dialogRef.close()),\r\n            map(action => UserCreationActions.saveUserRequested({\r\n                data: action.data as CreateUser\r\n            }))\r\n        ));\r\n\r\n    public saveUser$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(UserCreationActions.saveUserRequested),\r\n            pessimisticUpdate({\r\n                run: (action) =>\r\n                    this.addUserMutation.mutate({input: action.data}).pipe(\r\n                        map(({data}) => UserCreationActions.userCreationSucceeded({\r\n                            user: data?.addUser as User\r\n                        }))\r\n                    ),\r\n                onError: (action, error) => console.log(error)\r\n            })\r\n        ));\r\n    \r\n    public updateUserList$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(UserCreationActions.userCreationSucceeded),\r\n            map((action) => UsersGenericActions.usersListUpdated({\r\n                user: action.user\r\n            }))\r\n        ));\r\n\r\n    constructor(\r\n        private readonly actions$: Actions,\r\n        private usersQuery: UsersQuery,\r\n        private addUserMutation: AddUserMutation,\r\n        private dialog: MatDialog){}\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "usersQuery",
                        "type": "UsersQuery",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "addUserMutation",
                        "type": "AddUserMutation",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 77,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "usersQuery",
                        "type": "UsersQuery",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "addUserMutation",
                        "type": "AddUserMutation",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "UsersQuery",
            "id": "injectable-UsersQuery-d3c0c12370bbce3439d13d60438a5f4c3c1e4a97b24b3ba893d1b024399b910e51834594841b5f8b074baf77df0cc8e4c52e30118c4c317a6854e6914aade008",
            "file": "src/users/domain/graphql/queries/users-query.ts",
            "properties": [
                {
                    "name": "document",
                    "defaultValue": "gql`\r\n        query {\r\n            users {\r\n                correlationId\r\n                displayName\r\n                email\r\n            }\r\n        }`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        125,
                        164
                    ]
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport { Query, gql } from \"apollo-angular\";\r\nimport { User } from \"../../../shared\";\r\n\r\nexport interface Users{\r\n    users: User[]\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class UsersQuery extends Query<Users> {\r\n    public override document = gql`\r\n        query {\r\n            users {\r\n                correlationId\r\n                displayName\r\n                email\r\n            }\r\n        }`\r\n}",
            "extends": [
                "Query"
            ],
            "type": "injectable"
        },
        {
            "name": "UsersService",
            "id": "injectable-UsersService-6a76682408737c21ec0a25409955dcc1ffd76831b9e1009f7767c2abd131369a92ef79b99c9902b441ae0f28c8a72dc5058197ea913f6a7073756d1405d3fa91",
            "file": "src/users/domain/services/users.service.ts",
            "properties": [
                {
                    "name": "usersList$",
                    "defaultValue": "this.store.select(UsersSelectors.selectUsersList)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "usersLoaded$",
                    "defaultValue": "this.store.select(UsersSelectors.selectUsersLoaded)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methods": [
                {
                    "name": "dispatch",
                    "args": [
                        {
                            "name": "action",
                            "type": "Action",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "Action",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport { UsersState } from \"../state/users.reducer\";\r\nimport { Store, Action } from \"@ngrx/store\";\r\nimport * as UsersSelectors from \"../state/users.selectors\";\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class UsersService {\r\n    constructor(private store: Store<UsersState>){}\r\n\r\n    public usersLoaded$ = this.store.select(UsersSelectors.selectUsersLoaded);\r\n    public usersList$ = this.store.select(UsersSelectors.selectUsersList);\r\n\r\n    public dispatch(action: Action){\r\n        this.store.dispatch(action)\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<UsersState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<UsersState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-a9db3c9b40d55e74690c43f4248feb9681540c4a38e3703470768e080b4fdb592d40154758220e57da8f441866145e41357359c8736056bcca5826aaf5243945",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ig-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'Mi amor'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'ig-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrl: './app.component.scss'\r\n})\r\nexport class AppComponent {\r\n  title = 'Mi amor';\r\n}\r\n",
            "styleUrl": "./app.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<ig-toolbar></ig-toolbar>\r\n<ig-navbar>\r\n    <router-outlet />\r\n</ig-navbar>"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-f99d5216aa875363381d1edc9ab553b965222d30e980e9837caf48ffb40bbfebec6298e45c73bcf24ed75d36d99b92158fe095ff2285239812b4dd0cb285972b",
            "file": "src/components/buttons/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ig-button",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "action",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "Action",
                    "decorators": []
                },
                {
                    "name": "buttonDefinition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "ButtonDefinition",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "executed",
                    "defaultValue": "new EventEmitter<Action>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from \"@angular/core\";\r\nimport { BasicButton, ButtonDefinition } from \"../model\";\r\nimport { Action } from \"@ngrx/store\";\r\n\r\n@Component({\r\n    selector: 'ig-button',\r\n    templateUrl: './button.component.html',\r\n    styleUrl: './button.component.scss'\r\n})\r\nexport class ButtonComponent {\r\n    @Input() \r\n    public buttonDefinition: ButtonDefinition;\r\n\r\n    @Input()\r\n    public label?: string;\r\n\r\n    @Input()\r\n    public icon?: string;\r\n    \r\n    @Input()\r\n    public disabled : boolean = false;\r\n\r\n    @Input()\r\n    public action?: Action;\r\n\r\n    @Output()\r\n    public executed = new EventEmitter<Action>();\r\n}",
            "styleUrl": "./button.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "@switch (buttonDefinition.kind) {\r\n@case ('raised') {\r\n<button mat-raised-button [disabled]=\"disabled\" (click)=\"executed.emit(action)\">\r\n    @if (icon) {\r\n    <mat-icon>{{icon}}</mat-icon>\r\n    }\r\n    @if (label) {\r\n    <span>{{label}}</span>\r\n    }\r\n</button>\r\n}\r\n@case ('fab') {\r\n<button mat-fab [disabled]=\"disabled\" (click)=\"executed.emit(action)\">\r\n    @if (icon) {\r\n    <mat-icon>{{icon}}</mat-icon>\r\n    }\r\n    @if (label) {\r\n    <span>{{label}}</span>\r\n    }\r\n</button>\r\n}\r\n@default {\r\n<button mat-button [disabled]=\"disabled\" (click)=\"executed.emit(action)\">\r\n    @if (icon) {\r\n    <mat-icon>{{icon}}</mat-icon>\r\n    }\r\n    @if (label) {\r\n    <span>{{label}}</span>\r\n    }\r\n</button>\r\n}\r\n}"
        },
        {
            "name": "FormComponent",
            "id": "component-FormComponent-e3bbcd52dd7a221234dd71d28dfdc2d041a5872b8bcbbf631072ab01c4fbd29b492fd887ce639112c7d0d5d4fde2efafefa031d5dd57a75d50ada4ca40402433",
            "file": "src/components/forms/form/form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ig-form",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./form.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "formButtons",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "FormButton[]",
                    "decorators": []
                },
                {
                    "name": "formFields",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "DynamicFormField<TItem>[]",
                    "decorators": []
                },
                {
                    "name": "formGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "FormGroup",
                    "decorators": []
                },
                {
                    "name": "formId",
                    "defaultValue": "'formulario'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "formTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "humanizeLabel",
                    "args": [
                        {
                            "name": "label",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "label",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onCancelButtonClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "action",
                            "type": "Action",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "Action",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onResetButtonClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "onSaveButtonClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnDestroy } from \"@angular/core\";\r\nimport { Action, Store } from \"@ngrx/store\";\r\nimport { FormButton } from \"../../buttons\";\r\nimport { DynamicFormField } from \"../model\";\r\nimport { FormGroup } from \"@angular/forms\";\r\nimport { FormsActions } from \"./state/form.actions\";\r\n\r\n@Component({\r\n    selector: 'ig-form',\r\n    templateUrl: './form.component.html',\r\n    styleUrl: './form.component.scss'\r\n})\r\nexport class FormComponent<TItem> implements OnDestroy {\r\n    @Input()\r\n    public formId: string = 'formulario';\r\n\r\n    @Input()\r\n    public formTitle?: string;\r\n\r\n    @Input()\r\n    public formFields?: DynamicFormField<TItem>[];\r\n\r\n    @Input()\r\n    public formGroup: FormGroup;\r\n\r\n    @Input()\r\n    public formButtons : FormButton[] = [];\r\n\r\n    constructor(private readonly store: Store) {}\r\n\r\n    ngOnDestroy(): void {\r\n        this.formTitle = '';\r\n        this.formGroup = new FormGroup({});\r\n        this.formFields = [];\r\n        this.formButtons = [];\r\n    }\r\n\r\n    public humanizeLabel(label: string) {\r\n        let result = label.replace(/([a-z])([A-Z])/g, '$1 $2')\r\n        return result.charAt(0).toUpperCase() + result.slice(1);\r\n    }\r\n\r\n    public onClick(action: Action) {\r\n        this.store.dispatch(action)\r\n    }\r\n\r\n    public onSaveButtonClicked() {\r\n        let data = this.formGroup.value as TItem\r\n        this.store.dispatch(FormsActions.saveFormRequested({id:this.formId, data:data}))\r\n        this.formGroup.reset();\r\n    }\r\n    \r\n    public onResetButtonClicked() {\r\n        this.formGroup.reset();\r\n    }\r\n\r\n    public onCancelButtonClicked() {\r\n        this.formGroup.reset();\r\n        this.store.dispatch(FormsActions.cancelFormRequested({id: this.formId}));\r\n    }\r\n}",
            "styleUrl": "./form.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnDestroy"
            ],
            "templateData": "<mat-card>\r\n    <mat-card-header>\r\n        <h1>{{formTitle}}</h1>\r\n    </mat-card-header>\r\n    <mat-card-content>\r\n        <form class=\"form\" [formGroup]=\"formGroup\">\r\n            @for (field of formFields; track $index) {\r\n            @if (field.type == 'input') {\r\n            <mat-form-field class=\"formField\">\r\n                <mat-label>{{humanizeLabel(field.name)}}</mat-label>\r\n                <input matInput formControlName=\"{{field.name}}\" />\r\n            </mat-form-field>\r\n            } @else {\r\n            <mat-form-field class=\"formField\">\r\n                <mat-label>{{humanizeLabel(field.name)}}</mat-label>\r\n                <textarea matInput formControlName=\"{{field.name}}\"></textarea>\r\n            </mat-form-field>\r\n            }\r\n            }\r\n        </form>\r\n    </mat-card-content>\r\n    <mat-card-footer class=\"form-footer\">\r\n        <button mat-raised-button [disabled]=\"false\" (click)=\"onSaveButtonClicked()\">Save</button>\r\n        <button mat-button [disabled]=\"false\" (click)=\"onResetButtonClicked()\">Reset</button>\r\n        <button mat-button [disabled]=\"false\" (click)=\"onCancelButtonClicked()\">Cancel</button>\r\n        @for (button of formButtons; track $index) {\r\n        <ig-button [buttonDefinition]=\"button.buttonDefinition\" [label]=\"button.label\" [icon]=\"button.icon\"\r\n            [disabled]=\"button.disabled\" [action]=\"button.action\" (executed)=\"onClick($event)\"></ig-button>\r\n        }\r\n    </mat-card-footer>\r\n</mat-card>"
        },
        {
            "name": "FormFieldComponent",
            "id": "component-FormFieldComponent-df696e47fbb42db8cba782f1749e669dbaa94893bae01ad0b9d19ceeb469647ee36b25f54942446a813dc1a705190e49ced794e675b5319ae2e5fc3dd7b43f76",
            "file": "src/components/forms/form-field/form-field.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ig-form-field",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./form-field.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "formType",
                    "defaultValue": "'input'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "FormType",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, input } from \"@angular/core\";\r\nimport { FormType } from \"../model\";\r\n\r\n@Component({\r\n    selector: 'ig-form-field',\r\n    templateUrl: './form-field.component.html',\r\n    styleUrl: './form-field.component.scss'\r\n})\r\nexport class FormFieldComponent {\r\n    @Input()\r\n    public formType?: FormType = 'input';\r\n\r\n    @Input()\r\n    public label?: string;\r\n\r\n    @Input()\r\n    public disabled?: boolean;\r\n}",
            "styleUrl": "./form-field.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "@switch (formType) {\r\n@case ('text-area') {\r\n<mat-form-field>\r\n    <mat-label>{{label}}</mat-label>\r\n    <textarea matInput [disabled]=\"disabled\"></textarea>\r\n</mat-form-field>\r\n}\r\n@default {\r\n<mat-form-field>\r\n    <mat-label>{{label}}</mat-label>\r\n    <input matInput [disabled]=\"disabled\">\r\n</mat-form-field>\r\n}\r\n}"
        },
        {
            "name": "ListComponent",
            "id": "component-ListComponent-4ad07e7ce7702f2a82783c6120107be3caf00b41ac5bc9bf27aeb164a59277f873603c0a585a59b53a6160f4a37c548a7cc678e4f34046b24827c89b82864f73",
            "file": "src/components/lists/list/list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ig-list",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./list.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "listButtons",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "FormButton[]",
                    "decorators": []
                },
                {
                    "name": "listData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "Observable<TItem[]>",
                    "decorators": []
                },
                {
                    "name": "listHeaders",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "( | \"buttons\")[]",
                    "decorators": []
                },
                {
                    "name": "listId",
                    "defaultValue": "'list'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "listTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dataSource",
                    "defaultValue": "new MatTableDataSource<TItem>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "humanizeLabel",
                    "args": [
                        {
                            "name": "label",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "label",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from \"@angular/core\";\r\nimport { MatTableDataSource } from \"@angular/material/table\";\r\nimport { FormButton } from \"../../buttons\";\r\nimport { Observable, filter, map } from \"rxjs\";\r\n\r\n@Component({\r\n    selector: 'ig-list',\r\n    templateUrl: './list.component.html',\r\n    styleUrl: './list.component.scss'\r\n})\r\nexport class ListComponent<TItem> implements OnInit {\r\n    @Input()\r\n    public listId = 'list';\r\n\r\n    @Input()\r\n    public listTitle?: string;\r\n\r\n    @Input()\r\n    public listHeaders: (string & keyof TItem | 'buttons')[];\r\n\r\n    @Input()\r\n    public listData: Observable<TItem[]>;\r\n\r\n    @Input()\r\n    public listButtons: FormButton[];\r\n\r\n    public dataSource = new MatTableDataSource<TItem>();\r\n\r\n    public ngOnInit() {\r\n        this.listData.pipe(\r\n            filter(x => !!x),\r\n            map(data => this.dataSource.data = data)\r\n        ).subscribe();\r\n    }\r\n\r\n    public humanizeLabel(label: string) {\r\n        let result = label.replace(/([a-z])([A-Z])/g, '$1 $2')\r\n        return result.charAt(0).toUpperCase() + result.slice(1);\r\n    }\r\n}",
            "styleUrl": "./list.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-card>\r\n    <mat-card-header>\r\n        <mat-card-title class=\"list-title\">{{listTitle}}</mat-card-title>\r\n    </mat-card-header>\r\n    <mat-card-content>\r\n        <table mat-table [dataSource]=\"dataSource\" class=\"mat-elevarion-z8\">\r\n            @for (header of listHeaders; track $index) {\r\n            @if (header !== 'buttons') {\r\n            <ng-container matColumnDef=\"{{header}}\">\r\n                <th mat-header-cell *matHeaderCellDef>{{humanizeLabel(header)}}</th>\r\n                <td mat-cell *matCellDef=\"let element\">{{element[header]}}</td>\r\n            </ng-container>\r\n            } @else {\r\n            <ng-container matColumnDef=\"buttons\">\r\n                <th mat-header-cell *matHeaderCellDef></th>\r\n                <td mat-cell *matCellDef=\"let element\" fxLayout=\"row\" fxLayoutAlign=\"space-evenly center\">\r\n                    @for (listButton of listButtons; track $index) {\r\n                    <ig-button [buttonDefinition]=\"listButton.buttonDefinition\" [label]=\"listButton.label\"\r\n                        [icon]=\"listButton.icon\" [disabled]=\"listButton.disabled\"\r\n                        [action]=\"listButton.action\"></ig-button>\r\n                    }\r\n                </td>\r\n            </ng-container>\r\n            }\r\n            }\r\n            <tr mat-header-row *matHeaderRowDef=\"listHeaders\"></tr>\r\n            <tr mat-row *matRowDef=\"let row; columns: listHeaders\"></tr>\r\n        </table>\r\n    </mat-card-content>\r\n</mat-card>"
        },
        {
            "name": "NavbarComponent",
            "id": "component-NavbarComponent-c3792c71f66a87d569cf07e58a215fa07eadb411de04bd073b5cb81c9cd6af4cbcd88d5e6b85001b78b2e08b0350cdb6a2020bfeb1e9d738d3b4b1e7b8ebc53d",
            "file": "src/shell/navbar/navbar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ig-navbar",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./navbar.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "opened",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from \"@angular/core\";\r\n\r\n@Component({\r\n    selector: 'ig-navbar',\r\n    templateUrl: './navbar.component.html',\r\n    styleUrl: './navbar.component.scss'\r\n})\r\nexport class NavbarComponent {\r\n    @Input()\r\n    public opened = true;\r\n}",
            "styleUrl": "./navbar.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<mat-sidenav-container>\r\n    <mat-sidenav mode=\"side\" [opened]=\"opened\">\r\n        Sarasa\r\n    </mat-sidenav>\r\n    <mat-sidenav-content>\r\n        <ng-content></ng-content>\r\n    </mat-sidenav-content>\r\n</mat-sidenav-container>"
        },
        {
            "name": "ToolbarComponent",
            "id": "component-ToolbarComponent-5453a8ba9cb65045edbb9ca626efe57bd7e6482e4ab2cd33bef82e945cb263ec35d989fdd978f5e3c0ff26b5550e00d11f874c149ca9b95c292259c9ceb7b92b",
            "file": "src/shell/toolbar/toolbar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ig-toolbar",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./toolbar.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from \"@angular/core\";\r\n\r\n@Component({\r\n    selector: 'ig-toolbar',\r\n    templateUrl: './toolbar.component.html',\r\n    styleUrl: './toolbar.component.scss'\r\n})\r\nexport class ToolbarComponent {\r\n\r\n}",
            "styleUrl": "./toolbar.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<mat-toolbar>\r\n    <button mat-icon-button>\r\n        <mat-icon>menu</mat-icon>\r\n    </button>\r\n    <span>My App</span>\r\n    <span class=\"spacer\"></span>\r\n    <button mat-icon-button>\r\n        <mat-icon>account_circle</mat-icon>\r\n    </button>\r\n</mat-toolbar>"
        },
        {
            "name": "UserCreationFormComponent",
            "id": "component-UserCreationFormComponent-5130f23b63a129870f79cbb95b90733e3cdf179c109e290ebde3b0fe4759bfc8c41174fff5e09e836f5e7a3cf4ab043828525c5a2747a3b417c81c1e9005cb7c",
            "file": "src/users/feature/user-creation-form/user-creation-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ig-user-creation-form",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./user-creation-form.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<UserCreationFormComponent | CreateUser>",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "formButtons",
                    "defaultValue": "this.dynamicFormBuilder.formButtons",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "formFields",
                    "defaultValue": "this.dynamicFormBuilder.formFields",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "formId",
                    "defaultValue": "USER_CREATION_FORM_ID",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, OnDestroy, OnInit } from \"@angular/core\";\r\nimport { CreateUser } from \"../../shared\";\r\nimport { FormGroup, Validators } from \"@angular/forms\";\r\nimport { MatDialogRef } from \"@angular/material/dialog\";\r\nimport { DynamicFormBuilder } from \"../../../components/forms/form-builder/form-builder\";\r\n\r\nexport const USER_CREATION_FORM_ID = 'user-creation-form';\r\n\r\n@Component({\r\n    selector: 'ig-user-creation-form',\r\n    templateUrl: './user-creation-form.component.html',\r\n    styleUrl: './user-creation-form.component.scss',\r\n})\r\nexport class UserCreationFormComponent implements OnInit, OnDestroy {\r\n    public formId = USER_CREATION_FORM_ID;\r\n    public form : FormGroup;\r\n    public formButtons = this.dynamicFormBuilder.formButtons;\r\n    public formFields = this.dynamicFormBuilder.formFields;\r\n\r\n    constructor(\r\n        private dynamicFormBuilder: DynamicFormBuilder<CreateUser>,\r\n        public dialogRef: MatDialogRef<UserCreationFormComponent, CreateUser>) {}\r\n    \r\n    public ngOnInit(): void {\r\n        this.dynamicFormBuilder\r\n            .addFormField({\r\n                name: 'displayName',\r\n                type: 'input',\r\n                defaultValue: '',\r\n                disabled: false,\r\n                validators: [Validators.required, Validators.maxLength(140)]\r\n            })\r\n            .addFormField({\r\n                name: 'email',\r\n                type: 'input',\r\n                defaultValue: '',\r\n                disabled: false,\r\n                validators: [Validators.required, Validators.maxLength(140), Validators.email]\r\n            });\r\n        this.form = this.dynamicFormBuilder.buildForm();\r\n    }\r\n\r\n    public ngOnDestroy(): void {\r\n        this.dynamicFormBuilder.destroyForm();\r\n    }\r\n}",
            "styleUrl": "./user-creation-form.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dynamicFormBuilder",
                        "type": "DynamicFormBuilder<CreateUser>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<UserCreationFormComponent | CreateUser>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "dynamicFormBuilder",
                        "type": "DynamicFormBuilder<CreateUser>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<UserCreationFormComponent | CreateUser>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<ig-form [formId]=\"formId\" [formTitle]=\"'Create User'\" [formGroup]=\"form\" [formFields]=\"formFields\"\r\n    [formButtons]=\"formButtons\">\r\n</ig-form>"
        },
        {
            "name": "UserListComponent",
            "id": "component-UserListComponent-6f288c341e71a4f652a334aceac328cab75635b8320319bdaf2b2c39bb7ddfecb14ae4122e02164cb1276c7b33a2e1c4de48bc0966572dbb41299e542992c2a3",
            "file": "src/users/feature/user-list/user-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ig-users-list",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./user-list.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "listButtons",
                    "defaultValue": "[\r\n        {\r\n            buttonDefinition: {\r\n                buttonType: 'normal',\r\n                kind: 'raised',\r\n                type: 'basic'\r\n            },\r\n            label: 'Edit',\r\n            disabled: false,\r\n        }\r\n    ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormButton[]",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "listData",
                    "defaultValue": "this.usersService.usersList$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "listHeaders",
                    "defaultValue": "['displayName', 'email', \"buttons\"]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "( | \"buttons\")[]",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "listId",
                    "defaultValue": "USERS_LIST_ID",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "listTitle",
                    "defaultValue": "'Users'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "listToolbarButtons",
                    "defaultValue": "[\r\n        {\r\n            buttonDefinition: {\r\n                buttonType: 'normal',\r\n                kind: 'raised',\r\n                type: 'basic'\r\n            },\r\n            disabled: false,\r\n            label: 'New'\r\n        }\r\n    ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BasicButton[]",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "loaded$",
                    "defaultValue": "this.usersService.usersLoaded$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "userCreationDialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "openUserCreationDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from \"@angular/core\";\r\nimport { User } from \"../../shared\";\r\nimport { UsersService } from \"../../domain/services/users.service\";\r\nimport { MatDialog, } from \"@angular/material/dialog\";\r\nimport { USER_CREATION_FORM_ID } from \"../user-creation-form/user-creation-form.component\";\r\nimport { BasicButton, FormButton } from \"../../../components/buttons\";\r\nimport { UserCreationActions, UsersGenericActions } from \"../../domain/state/users.actions\";\r\n\r\nexport const USERS_LIST_ID = 'users-list';\r\n\r\n@Component({\r\n    selector: \"ig-users-list\",\r\n    templateUrl: './user-list.component.html',\r\n    styleUrl: \"./user-list.component.scss\",\r\n})\r\nexport class UserListComponent {\r\n    public listId = USERS_LIST_ID;\r\n    public listTitle = 'Users';\r\n    public listHeaders : (string & keyof User | 'buttons')[] = ['displayName', 'email', \"buttons\"];\r\n    public listData = this.usersService.usersList$;\r\n    public listButtons: FormButton[] = [\r\n        {\r\n            buttonDefinition: {\r\n                buttonType: 'normal',\r\n                kind: 'raised',\r\n                type: 'basic'\r\n            },\r\n            label: 'Edit',\r\n            disabled: false,\r\n        }\r\n    ]\r\n    public listToolbarButtons : BasicButton[] = [\r\n        {\r\n            buttonDefinition: {\r\n                buttonType: 'normal',\r\n                kind: 'raised',\r\n                type: 'basic'\r\n            },\r\n            disabled: false,\r\n            label: 'New'\r\n        }\r\n    ];\r\n    public loaded$ = this.usersService.usersLoaded$;\r\n\r\n    constructor(\r\n        private readonly usersService: UsersService,\r\n        public userCreationDialog: MatDialog){\r\n    }\r\n\r\n    public openUserCreationDialog() {\r\n        this.usersService.dispatch(\r\n            UserCreationActions.openCreationDialog({\r\n                dialogConfig:{\r\n                    id: USER_CREATION_FORM_ID,\r\n                    width: '35%',\r\n                    height: 'auto',\r\n        }}))\r\n    }\r\n}",
            "styleUrl": "./user-list.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "usersService",
                        "type": "UsersService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userCreationDialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 43,
                "jsdoctags": [
                    {
                        "name": "usersService",
                        "type": "UsersService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userCreationDialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<mat-toolbar>\r\n    <button mat-raised-button (click)=\"openUserCreationDialog()\"> New </button>\r\n</mat-toolbar>\r\n@if (loaded$ | async) {\r\n<ig-list [listId]=\"listId\" [listTitle]=\"listTitle\" [listHeaders]=\"listHeaders\" [listData]=\"listData\"\r\n    [listButtons]=\"listButtons\"></ig-list>\r\n} @else {\r\n<mat-spinner></mat-spinner>\r\n}"
        },
        {
            "name": "UsersRoutingComponent",
            "id": "component-UsersRoutingComponent-d9a980389db0ab6d50684344d37a8a316ac6b7bbee25e2a99d8a63db0e0494881b2ceae699ca75638aac1032b43f14feac8c96ced2c829d53230cc2bdf6c6be2",
            "file": "src/users/users-routing.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ig-users",
            "styleUrls": [],
            "styles": [],
            "template": "<router-outlet></router-outlet>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { UsersGenericActions } from './domain/state/users.actions';\r\n\r\n@Component({\r\n  selector: 'ig-users',\r\n  template: `<router-outlet></router-outlet>`,\r\n})\r\nexport class UsersRoutingComponent {\r\n  constructor(private store: Store){\r\n    this.store.dispatch(UsersGenericActions.init());\r\n  }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": []
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-15530f94c0390df62befe2ec9a3768dde95bce923847b402352d0ce5132a90390fbf3f4e9f5c130136ad4793b4a30018d92bf1921c89fad46852bd915e93ba1a",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule, isDevMode } from '@angular/core';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { provideAnimationsAsync } from '@angular/platform-browser/animations/async';\r\nimport { ToolbarModule } from '../shell/toolbar/toolbar.module';\r\nimport { NavbarModule } from '../shell/navbar/navbar.module';\r\nimport { APOLLO_OPTIONS, ApolloModule } from 'apollo-angular';\r\nimport { HttpLink } from 'apollo-angular/http';\r\nimport { InMemoryCache } from '@apollo/client/core'\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { uri } from './graphql.module';\r\nimport { StoreModule } from '@ngrx/store';\r\nimport { StoreRouterConnectingModule } from '@ngrx/router-store';\r\nimport { EffectsModule } from '@ngrx/effects';\r\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\r\n\r\n@NgModule({\r\n    declarations: [AppComponent],\r\n    imports: [\r\n        BrowserModule,\r\n        BrowserAnimationsModule,\r\n        ApolloModule,\r\n        HttpClientModule,\r\n        ToolbarModule,\r\n        NavbarModule,\r\n        RouterOutlet,\r\n        AppRoutingModule,\r\n        StoreModule.forRoot({}, {}),\r\n        StoreRouterConnectingModule.forRoot(),\r\n        EffectsModule.forRoot([]),\r\n        StoreDevtoolsModule.instrument({ maxAge: 25, logOnly: !isDevMode() })],\r\n    exports: [],\r\n    providers: [\r\n      provideAnimationsAsync(),\r\n      {\r\n        provide: APOLLO_OPTIONS,\r\n        useFactory(httpLink: HttpLink){\r\n          return {\r\n            cache: new InMemoryCache(),\r\n            link: httpLink.create({\r\n              uri: uri\r\n            })\r\n          }\r\n        },\r\n        deps: [HttpLink]\r\n      }\r\n    ],\r\n    bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "NavbarModule"
                        },
                        {
                            "name": "RouterOutlet"
                        },
                        {
                            "name": "ToolbarModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-2cb03db0fb30f7999ba57138d7367ab5f289d7acfa36416fe92e92a67045316d096a199b75515f251c31131e0d2134de0eebedf44a8ef024638d69c136e2306f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from \"@angular/core\";\r\nimport { RouterModule, Routes } from \"@angular/router\";\r\n\r\nconst routes : Routes = [\r\n    {\r\n        path: 'users',\r\n        loadChildren: () => \"import('../users').then(m => m.UsersModule)\"\r\n    },\r\n    {\r\n        path: '',\r\n        redirectTo: 'users',\r\n        pathMatch: 'full'\r\n    }\r\n]\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forRoot(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule{}",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ButtonsModule",
            "id": "module-ButtonsModule-b0eeddbe9f93ffc313994dea885f25dd7909ee0e9c7edeee1e3277d94a76506abffd4d76c3cf6e4d9ea63c225f6ee50315d6be7a66054b4539f26f6e9a0a14f0",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/components/buttons/buttons.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from \"@angular/common\";\r\nimport { NgModule } from \"@angular/core\";\r\nimport { MatButtonModule } from \"@angular/material/button\";\r\nimport { MatIconModule } from \"@angular/material/icon\";\r\nimport { ButtonComponent } from \"./button/button.component\";\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        MatButtonModule,\r\n        MatIconModule\r\n    ],\r\n    declarations: [ButtonComponent],\r\n    exports: [ButtonComponent]\r\n})\r\nexport class ButtonsModule {}",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ComponentsModule",
            "id": "module-ComponentsModule-119571e6e8d1ee5a6995370c152bab597d37a3b6689f5e9550c13eb8ac84b1e883d73462bb9f347c17505dc7217d1dc0c24b7b23f8e9c3d5ecad8c46ac62f92b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/components/components.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from \"@angular/common\";\r\nimport { NgModule } from \"@angular/core\";\r\nimport { ButtonsModule } from \"./buttons\";\r\nimport { CustomFormsModule } from \"./forms/custom-forms.module\";\r\nimport { CustomListsModule } from \"./lists/custom-lists.module\";\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        ButtonsModule,\r\n        CustomFormsModule,\r\n        CustomListsModule],\r\n    exports: [\r\n        ButtonsModule, CustomFormsModule, CustomListsModule]\r\n})\r\nexport class ComponentsModule {}",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonsModule"
                        },
                        {
                            "name": "CustomFormsModule"
                        },
                        {
                            "name": "CustomListsModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ButtonsModule"
                        },
                        {
                            "name": "CustomFormsModule"
                        },
                        {
                            "name": "CustomListsModule"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CustomFormsModule",
            "id": "module-CustomFormsModule-f8ed0d9c2c713b64949162d8ebecea88ca2253d1ea67d8f8cc9a6f8c7dfea440cd1dd525f8eedfa996b199483268f1658777652eb364e09d8ac63c534e261cea",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/components/forms/custom-forms.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from \"@angular/common\";\r\nimport { NgModule } from \"@angular/core\";\r\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\r\nimport { MatFormFieldModule } from \"@angular/material/form-field\";\r\nimport { MatInputModule } from \"@angular/material/input\";\r\nimport { FormFieldComponent } from \"./form-field/form-field.component\";\r\nimport { MatSelect } from \"@angular/material/select\";\r\nimport { MatOptionModule } from \"@angular/material/core\";\r\nimport { FormComponent } from \"./form/form.component\";\r\nimport { ButtonsModule } from \"../buttons\";\r\nimport { MatCardModule } from \"@angular/material/card\";\r\nimport { MatButtonModule } from \"@angular/material/button\";\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        ReactiveFormsModule,\r\n        FormsModule,\r\n        MatFormFieldModule,\r\n        MatInputModule,\r\n        MatSelect,\r\n        MatOptionModule,\r\n        MatCardModule,\r\n        MatButtonModule,\r\n        ButtonsModule],\r\n        declarations: [\r\n            FormComponent,\r\n            FormFieldComponent],\r\n        exports: [\r\n            FormComponent,\r\n            FormFieldComponent]\r\n})\r\nexport class CustomFormsModule {}",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FormComponent"
                        },
                        {
                            "name": "FormFieldComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonsModule"
                        },
                        {
                            "name": "MatSelect"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FormComponent"
                        },
                        {
                            "name": "FormFieldComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CustomListsModule",
            "id": "module-CustomListsModule-24b2b3aa655bb586bb330ef36b4a674189f7a7fba5d3bd4acdd36c78dc5d5137a09cce6a6019a6a3fa4715abbf14766961e03153926cdef7f1f203cdae76af3c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/components/lists/custom-lists.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from \"@angular/core\";\r\nimport { ListComponent } from \"./list/list.component\";\r\nimport { MatTableModule } from \"@angular/material/table\";\r\nimport { ButtonsModule } from \"../buttons\";\r\nimport { MatCardModule } from \"@angular/material/card\";\r\nimport { FlexLayoutModule } from \"@angular/flex-layout\";\r\n\r\n@NgModule({\r\n    declarations: [ListComponent],\r\n    imports: [MatTableModule, ButtonsModule, MatCardModule, FlexLayoutModule],\r\n    exports: [ListComponent]\r\n})\r\nexport class CustomListsModule {}",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ListComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonsModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ListComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NavbarModule",
            "id": "module-NavbarModule-9cffe8ad6b015ae73ca53640e2950b4de36ac39b56a69b09117ce2b616be9b56862a8d4ed8df12ee3c2dc0e7f80d989b6fde353dba7562506c2e3d4092640910",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/shell/navbar/navbar.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from \"@angular/common\";\r\nimport { NgModule } from \"@angular/core\";\r\nimport { MatSidenavModule } from \"@angular/material/sidenav\";\r\nimport { NavbarComponent } from \"./navbar.component\";\r\n\r\nconst MaterialModule = [MatSidenavModule];\r\n\r\n@NgModule({\r\n    declarations: [NavbarComponent],\r\n    imports: [CommonModule, MaterialModule],\r\n    exports: [NavbarComponent]\r\n})\r\nexport class NavbarModule {}",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NavbarComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "NavbarComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ToolbarModule",
            "id": "module-ToolbarModule-87b995d90be4c42138dfd3f43cc3ebef95ddf7f330768427c68c6cd0eb4eb0d75903b2d2bdddd1247d6ed6702d5f2928f67e055c5ebe019fb346c7eb9af0475d",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/shell/toolbar/toolbar.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from \"@angular/common\";\r\nimport { NgModule } from \"@angular/core\";\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { ToolbarComponent } from \"./toolbar.component\";\r\n\r\nconst MaterialModules = [\r\n    MatToolbarModule,\r\n    MatButtonModule,\r\n    MatIconModule\r\n]\r\n\r\n@NgModule({\r\n    declarations: [ToolbarComponent],\r\n    imports: [CommonModule,MaterialModules],\r\n    exports: [ToolbarComponent]\r\n})\r\nexport class ToolbarModule {}",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ToolbarComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ToolbarComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "UsersModule",
            "id": "module-UsersModule-01f9ba682c6ee3a8b4052398fbd0f11b1c7a30d1bdbf44760079a68ca2fbaf6bc23d06ae68d0a4117f87022f472505a87a6da965e3d5cb06b853597fcfd64933",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/users/users.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from \"@angular/common\";\r\nimport { NgModule } from \"@angular/core\";\r\nimport { UsersRoutingModule } from \"./users-routing.module\";\r\nimport { UsersRoutingComponent } from \"./users-routing.component\";\r\nimport { MatTableModule } from '@angular/material/table'\r\nimport { UserListComponent } from \"./feature/user-list/user-list.component\";\r\nimport { ToolbarModule } from \"../shell/toolbar/toolbar.module\";\r\nimport { StoreModule } from \"@ngrx/store\";\r\nimport { USERS_FEATURE_KEY, usersReducer } from \"./domain/state/users.reducer\";\r\nimport { EffectsModule } from \"@ngrx/effects\";\r\nimport { UsersEffects } from \"./domain/state/users.effects\";\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatFormFieldModule } from \"@angular/material/form-field\";\r\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { UserCreationFormComponent } from \"./feature/user-creation-form/user-creation-form.component\";\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { ComponentsModule } from \"../components/components.module\";\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\n\r\nconst MaterialModules = [\r\n    MatTableModule,\r\n    MatToolbarModule,\r\n    MatButtonModule,\r\n    MatDialogModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatCardModule,\r\n    MatProgressSpinnerModule\r\n]\r\n\r\n@NgModule({\r\n    declarations: [\r\n        UsersRoutingComponent,\r\n        UserListComponent,\r\n        UserCreationFormComponent],\r\n    imports: [\r\n        CommonModule,\r\n        ToolbarModule,\r\n        ReactiveFormsModule,\r\n        FormsModule,\r\n        MaterialModules,\r\n        UsersRoutingModule,\r\n        ComponentsModule,\r\n        StoreModule.forFeature(\r\n            USERS_FEATURE_KEY,\r\n            usersReducer\r\n        ),\r\n        EffectsModule.forFeature([UsersEffects])],\r\n    exports: []\r\n})\r\nexport class UsersModule {}",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "UserCreationFormComponent"
                        },
                        {
                            "name": "UserListComponent"
                        },
                        {
                            "name": "UsersRoutingComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ToolbarModule"
                        },
                        {
                            "name": "UsersRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "UsersRoutingModule",
            "id": "module-UsersRoutingModule-7f6bf09c20b63249eab2e56c7b7cc80616ca1350d5f0e895220ecc59fb4baba87c325b1cca82c06c147861f800887f1da57fe32500842145c852f6effeed1d7a",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/users/users-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from \"@angular/core\";\r\nimport { RouterModule, Routes } from \"@angular/router\";\r\nimport { UsersRoutingComponent } from \"./users-routing.component\";\r\nimport { UserListComponent } from \"./feature/user-list/user-list.component\";\r\nimport { UserCreationFormComponent } from \"./feature/user-creation-form/user-creation-form.component\";\r\n\r\nconst routes : Routes = [\r\n    {\r\n        path: '',\r\n        component: UsersRoutingComponent,\r\n        children: [\r\n            {\r\n                path: '',\r\n                component: UserListComponent,\r\n                children: [\r\n                    {\r\n                        path: 'new',\r\n                        component: UserCreationFormComponent\r\n                    }\r\n                ]\r\n            }\r\n        ]\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class UsersRoutingModule {}",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "FormsActions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/forms/form/state/form.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createActionGroup({\r\n    source: 'Form',\r\n    events: {\r\n        'Save form requested': props<{id: string, data: any}>(),\r\n        'Cancel form requested': props<{id: string}>(),\r\n    }\r\n})"
            },
            {
                "name": "getUsersState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/users/domain/state/users.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<UsersState>(USERS_FEATURE_KEY)"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/users/domain/state/users.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "UsersState",
                "defaultValue": "{\r\n    usersLoaded: false,\r\n    usersList: []\r\n}"
            },
            {
                "name": "MaterialModule",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/shell/navbar/navbar.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[MatSidenavModule]"
            },
            {
                "name": "MaterialModules",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/users/users.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n    MatTableModule,\r\n    MatToolbarModule,\r\n    MatButtonModule,\r\n    MatDialogModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatCardModule,\r\n    MatProgressSpinnerModule\r\n]"
            },
            {
                "name": "MaterialModules",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/shell/toolbar/toolbar.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n    MatToolbarModule,\r\n    MatButtonModule,\r\n    MatIconModule\r\n]"
            },
            {
                "name": "reducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/users/domain/state/users.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\r\n    initialState,\r\n    on(UsersGenericActions.usersListLoaded, (state, action) =>({\r\n        ...state,\r\n        usersLoaded: true,\r\n        usersList: action.usersList\r\n    })),\r\n    on(UserCreationActions.userCreationSucceeded, state =>({\r\n        ...state,\r\n        usersLoaded: false,\r\n    })),\r\n    on(UsersGenericActions.usersListUpdated, (state, action) => ({\r\n        ...state,\r\n        usersLoaded: true,\r\n        usersList: state.usersList.concat(action.user)\r\n    }))\r\n)"
            },
            {
                "name": "selectUsersList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/users/domain/state/users.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n    getUsersState,\r\n    state => state.usersList\r\n)"
            },
            {
                "name": "selectUsersLoaded",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/users/domain/state/users.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n    getUsersState,\r\n    (state) => state.usersLoaded\r\n)"
            },
            {
                "name": "uri",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/graphql.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'http://localhost:5038/graphql/'"
            },
            {
                "name": "USER_CREATION_FORM_ID",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/users/feature/user-creation-form/user-creation-form.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'user-creation-form'"
            },
            {
                "name": "UserCreationActions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/users/domain/state/users.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createActionGroup({\r\n    source: \"User Creation form\",\r\n    events: {\r\n        \"Open creation dialog\": props<{dialogConfig: MatDialogConfig}>(),\r\n        \"Save user requested\": props<{data: CreateUser}>(),\r\n        \"User creation succeeded\": props<{user: User}>(),\r\n    }\r\n})"
            },
            {
                "name": "USERS_FEATURE_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/users/domain/state/users.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'users'"
            },
            {
                "name": "USERS_LIST_ID",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/users/feature/user-list/user-list.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'users-list'"
            },
            {
                "name": "UsersGenericActions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/users/domain/state/users.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createActionGroup({\r\n    source: \"Users\",\r\n    events: {\r\n        \"Init\": emptyProps(),\r\n        \"Users List Loaded\": props<{usersList: User[]}>(),\r\n        \"Users List Updated\": props<{user: User}>(),\r\n        \"New User button clicked\": emptyProps()\r\n    }\r\n})"
            }
        ],
        "functions": [
            {
                "name": "addUserOrdered",
                "file": "src/users/domain/state/users.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "list",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "user",
                        "type": "User",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "list",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "user",
                        "type": "User",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "usersReducer",
                "file": "src/users/domain/state/users.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "type": "UsersState",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "action",
                        "type": "Action",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "state",
                        "type": "UsersState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "type": "Action",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "FormType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"input\" | \"text-area\"",
                "file": "src/components/forms/model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "src/components/forms/form/state/form.actions.ts": [
                {
                    "name": "FormsActions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/forms/form/state/form.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createActionGroup({\r\n    source: 'Form',\r\n    events: {\r\n        'Save form requested': props<{id: string, data: any}>(),\r\n        'Cancel form requested': props<{id: string}>(),\r\n    }\r\n})"
                }
            ],
            "src/users/domain/state/users.selectors.ts": [
                {
                    "name": "getUsersState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/users/domain/state/users.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<UsersState>(USERS_FEATURE_KEY)"
                },
                {
                    "name": "selectUsersList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/users/domain/state/users.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    getUsersState,\r\n    state => state.usersList\r\n)"
                },
                {
                    "name": "selectUsersLoaded",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/users/domain/state/users.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    getUsersState,\r\n    (state) => state.usersLoaded\r\n)"
                }
            ],
            "src/users/domain/state/users.reducer.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/users/domain/state/users.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UsersState",
                    "defaultValue": "{\r\n    usersLoaded: false,\r\n    usersList: []\r\n}"
                },
                {
                    "name": "reducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/users/domain/state/users.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\r\n    initialState,\r\n    on(UsersGenericActions.usersListLoaded, (state, action) =>({\r\n        ...state,\r\n        usersLoaded: true,\r\n        usersList: action.usersList\r\n    })),\r\n    on(UserCreationActions.userCreationSucceeded, state =>({\r\n        ...state,\r\n        usersLoaded: false,\r\n    })),\r\n    on(UsersGenericActions.usersListUpdated, (state, action) => ({\r\n        ...state,\r\n        usersLoaded: true,\r\n        usersList: state.usersList.concat(action.user)\r\n    }))\r\n)"
                },
                {
                    "name": "USERS_FEATURE_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/users/domain/state/users.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'users'"
                }
            ],
            "src/shell/navbar/navbar.module.ts": [
                {
                    "name": "MaterialModule",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/shell/navbar/navbar.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[MatSidenavModule]"
                }
            ],
            "src/users/users.module.ts": [
                {
                    "name": "MaterialModules",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/users/users.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n    MatTableModule,\r\n    MatToolbarModule,\r\n    MatButtonModule,\r\n    MatDialogModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatCardModule,\r\n    MatProgressSpinnerModule\r\n]"
                }
            ],
            "src/shell/toolbar/toolbar.module.ts": [
                {
                    "name": "MaterialModules",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/shell/toolbar/toolbar.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n    MatToolbarModule,\r\n    MatButtonModule,\r\n    MatIconModule\r\n]"
                }
            ],
            "src/app/graphql.module.ts": [
                {
                    "name": "uri",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/graphql.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'http://localhost:5038/graphql/'"
                }
            ],
            "src/users/feature/user-creation-form/user-creation-form.component.ts": [
                {
                    "name": "USER_CREATION_FORM_ID",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/users/feature/user-creation-form/user-creation-form.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'user-creation-form'"
                }
            ],
            "src/users/domain/state/users.actions.ts": [
                {
                    "name": "UserCreationActions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/users/domain/state/users.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createActionGroup({\r\n    source: \"User Creation form\",\r\n    events: {\r\n        \"Open creation dialog\": props<{dialogConfig: MatDialogConfig}>(),\r\n        \"Save user requested\": props<{data: CreateUser}>(),\r\n        \"User creation succeeded\": props<{user: User}>(),\r\n    }\r\n})"
                },
                {
                    "name": "UsersGenericActions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/users/domain/state/users.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createActionGroup({\r\n    source: \"Users\",\r\n    events: {\r\n        \"Init\": emptyProps(),\r\n        \"Users List Loaded\": props<{usersList: User[]}>(),\r\n        \"Users List Updated\": props<{user: User}>(),\r\n        \"New User button clicked\": emptyProps()\r\n    }\r\n})"
                }
            ],
            "src/users/feature/user-list/user-list.component.ts": [
                {
                    "name": "USERS_LIST_ID",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/users/feature/user-list/user-list.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'users-list'"
                }
            ]
        },
        "groupedFunctions": {
            "src/users/domain/state/users.reducer.ts": [
                {
                    "name": "addUserOrdered",
                    "file": "src/users/domain/state/users.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "list",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "list",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "usersReducer",
                    "file": "src/users/domain/state/users.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "type": "UsersState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "Action",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "UsersState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "Action",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "src/components/forms/model.ts": [
                {
                    "name": "FormType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"input\" | \"text-area\"",
                    "file": "src/components/forms/model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "users",
                        "loadChildren": "../users#UsersModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/users/users-routing.module.ts",
                                        "module": "UsersRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "UsersRoutingComponent",
                                                "children": [
                                                    {
                                                        "path": "",
                                                        "component": "UserListComponent",
                                                        "children": [
                                                            {
                                                                "path": "new",
                                                                "component": "UserCreationFormComponent"
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "UsersModule"
                            }
                        ]
                    },
                    {
                        "path": "",
                        "redirectTo": "users",
                        "pathMatch": "full"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/graphql.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "uri",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/buttons/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/components/buttons/model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BasicButton",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/components/buttons/model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ButtonDefinition",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/components/buttons/model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FormButton",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/components/forms/form-builder/form-builder.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DynamicFormBuilder",
                "coveragePercent": 44,
                "coverageCount": "4/9",
                "status": "medium"
            },
            {
                "filePath": "src/components/forms/form-field/form-field.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormFieldComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/components/forms/form/form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/components/forms/form/state/form.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FormsActions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/forms/model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DynamicFormField",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/components/lists/list/list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/shell/navbar/navbar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavbarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/shell/navbar/navbar.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MaterialModule",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/shell/toolbar/toolbar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ToolbarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/shell/toolbar/toolbar.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MaterialModules",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/users/domain/graphql/mutations/add-user-mutation.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AddUserMutation",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/users/domain/graphql/mutations/add-user-mutation.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AddUserResponse",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/users/domain/graphql/queries/users-query.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UsersQuery",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/users/domain/graphql/queries/users-query.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Users",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/users/domain/services/users.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UsersService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/users/domain/state/users.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UserCreationActions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/users/domain/state/users.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UsersGenericActions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/users/domain/state/users.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UsersEffects",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/users/domain/state/users.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UsersPartialState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/users/domain/state/users.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UsersState",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/users/domain/state/users.reducer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "addUserOrdered",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/users/domain/state/users.reducer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "usersReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/users/domain/state/users.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/users/domain/state/users.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/users/domain/state/users.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "USERS_FEATURE_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/users/domain/state/users.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getUsersState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/users/domain/state/users.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectUsersList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/users/domain/state/users.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectUsersLoaded",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/users/feature/user-creation-form/user-creation-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserCreationFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/users/feature/user-creation-form/user-creation-form.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "USER_CREATION_FORM_ID",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/users/feature/user-list/user-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/users/feature/user-list/user-list.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "USERS_LIST_ID",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/users/shared/models.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CreateUser",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/users/shared/models.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UpdateUser",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/users/shared/models.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/users/users-routing.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UsersRoutingComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/users/users.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MaterialModules",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}